https://leetcode.com/problems/swap-adjacent-in-lr-string/

class Solution {
    public boolean canTransform(String start, String end) {
        HashMap<String, String> map = new HashMap();
        map.put("RX", "XR");
        map.put("XL","LX");
        
        return recurse(start.toCharArray(), end.toCharArray(), map);
    }
    
//     start = "RRX" -> "RXR" , end = "XRR"
    private boolean recurse(char[] start, char[] end, HashMap<String, String> map) {

        if(String.valueOf(start).equals(String.valueOf(end))) return true;
        
        for(int i=0; i<start.length; i++) {
            if(start[i] == end[i]) continue;
            
            //found a mismatch
            String temp = String.valueOf(start[i]);
            
            //consider next char 
            if(i+1 < start.length) {
                
                String temp1 = temp + String.valueOf(start[i+1]);
            
                String swapValue = map.get(temp1);
                
                if(swapValue != null) {
                    
                    start[i] = swapValue.charAt(0);
                    start[i+1] = swapValue.charAt(1);
                    
                    if(recurse(start, end, map)) return true;
                    
                    start[i] = temp1.charAt(0);
                    start[i+1] = temp1.charAt(1);
                }      
            }
            
            //or consider prev char
            if(i-1 >= 0) {
                
                String temp2 = String.valueOf(start[i-1]) + temp;
                
                String swapValue = map.get(temp2);
                
                if(swapValue != null) {
                    
                    start[i-1] = swapValue.charAt(0);
                    start[i] = swapValue.charAt(1);
                    
                    if(recurse(start, end, map)) return true;
                    
                    start[i-1] = temp2.charAt(0);
                    start[i] = temp2.charAt(1);
                }
            }  
        }
        
        return false;  
    }
}
